# main.py
# TONKHO_ODOO_BOT ‚Äì Telegram ‚Üî Odoo ERP Integration (Realtime, improved location parsing)
# Author: Anh Ho√†n ‚Äì Final version (2025-10-31)
# L∆ØU √ù: x√°c ƒë·ªãnh "C√≥ h√†ng" = quantity - reserved_quantity (t∆∞∆°ng ·ª©ng c·ªôt 'C√≥ h√†ng' tr√™n Odoo)

import os
import re
import logging
import xmlrpc.client
from aiohttp import web
from aiogram import Bot, Dispatcher, types

# ===================== C·∫§U H√åNH =====================
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("‚ùå Thi·∫øu BOT_TOKEN. H√£y khai b√°o trong Render Environment.")

ODOO_URL  = os.getenv("ODOO_URL", "https://erp.nguonsongviet.vn")
ODOO_DB   = os.getenv("ODOO_DB", "production")
ODOO_USER = os.getenv("ODOO_USER", "kinhdoanh09@nguonsongviet.vn")
ODOO_PASS = os.getenv("ODOO_PASS", "Tronghoan91@")

WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL", "https://ton-kho-odoo.onrender.com").rstrip("/")
WEBHOOK_PATH = f"/tg/webhook/{BOT_TOKEN}"
WEBHOOK_URL  = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
PORT = int(os.getenv("PORT", "10000"))

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ===================== H√ÄM H·ªñ TR·ª¢ NH·∫¨N DI·ªÜN KHO =====================
def classify_location(loc_name_raw: str):
    """
    Tr·∫£ v·ªÅ 1 trong: "HN","HCM","THANHLY_HN","THANHLY_HCM","NHAP_HN","OTHER"
    Nguy√™n t·∫Øc:
    - N·∫øu c√≥ 'THANH L√ù' -> v√†o thanh l√Ω t∆∞∆°ng ·ª©ng HN/HCM n·∫øu c√≥ th√¥ng tin ƒë·ªãa ph∆∞∆°ng
    - N·∫øu c√≥ 'NH·∫¨P' / 'INCOMING' + 'HN'/'H√Ä N·ªòI' -> NHAP_HN
    - Ki·ªÉm tra t·ª´ kh√≥a HCM tr∆∞·ªõc (v√¨ 'HN' c√≥ th·ªÉ xu·∫•t hi·ªán trong 'CHUNG H∆†N'), sau ƒë√≥ H√Ä N·ªòI/HN
    - N·∫øu kh√¥ng kh·ªõp, tr·∫£ OTHER
    """
    if not loc_name_raw:
        return "OTHER"
    loc = re.sub(r'\s+', ' ', loc_name_raw.strip().upper())

    # chu·∫©n h√≥a m·ªôt v√†i thu·∫≠t ng·ªØ th∆∞·ªùng g·∫∑p
    loc = loc.replace("TP HCM", "HCM").replace("TPHCM","HCM").replace("HA NOI","H√Ä N·ªòI")
    # detect thanh l√Ω
    if "THANH L√ù" in loc or "THANH LY" in loc or "THANH-LY" in loc:
        if any(x in loc for x in ["HCM", "KHO HCM", "SHOWROOM HCM"]):
            return "THANHLY_HCM"
        if any(x in loc for x in ["H√Ä N·ªòI", "HA NOI", "HN", "KHO H√Ä N·ªòI", "KHO HA NOI"]):
            return "THANHLY_HN"
        # n·∫øu kh√¥ng r√µ ƒë·ªãa ph∆∞∆°ng, c·ªë g·∫Øng d√πng m√£ v·ªã tr√≠ (s·ªë ƒë·∫ßu)
        code = extract_location_code(loc)
        if code and code.startswith("1"):  # heuristic: m√£ 2xx th∆∞·ªùng HN (tu·ª≥ h·ªá th·ªëng)
            return "THANHLY_HN"
        return "THANHLY_HN"  # default ƒë·∫∑t v·ªÅ HN n·∫øu kh√¥ng r√µ

    # detect nh·∫≠p
    if "NH·∫¨P" in loc or "NHAP" in loc or "INCOMING" in loc:
        if any(x in loc for x in ["HCM", "KHO HCM", "SHOWROOM HCM"]):
            return "OTHER"  # nh·∫≠p HCM kh√¥ng c·∫ßn ƒë·∫øm v√†o NH·∫¨P HN; gi·ªØ OTHER
        if any(x in loc for x in ["H√Ä N·ªòI", "HA NOI", "HN", "KHO H√Ä N·ªòI", "KHO HA NOI"]):
            return "NHAP_HN"
        code = extract_location_code(loc)
        if code and code.startswith("2"):  # heuristic kh√°c n·∫øu c·∫ßn
            return "NHAP_HN"
        # default: n·∫øu ch·ª©a 'NH·∫¨P' m√† kh√¥ng x√°c ƒë·ªãnh th√¨ b·ªè qua
        return "OTHER"

    # detect HCM (∆∞u ti√™n)
    if any(x in loc for x in ["HCM", "KHO HCM", "SHOWROOM HCM", "CHI NH√ÅNH HCM"]):
        return "HCM"

    # detect HN
    if any(x in loc for x in ["H√Ä N·ªòI", "HA NOI", "HN", "KHO H√Ä N·ªòI", "KHO HA NOI"]):
        return "HN"

    # fallback: t√¨m m√£ v·ªã tr√≠ d·∫°ng "123/123" ho·∫∑c "123/456" r·ªìi √°p heuristic
    code = extract_location_code(loc)
    if code:
        # n·∫øu m√£ b·∫Øt ƒë·∫ßu b·∫±ng 1xx ho·∫∑c 2xx => nhi·ªÅu h·ªá th·ªëng d√πng 2xx cho HN, 1xx cho HCM (v√≠ d·ª•)
        # KH√îNG gi·∫£ s·ª≠ qu√° c·ª©ng; ta ch·ªâ d√πng heuristic n·∫øu kh√¥ng t√¨m th·∫•y t·ª´ kho√°
        if code.startswith(("201","20","2")):
            return "HN"
        if code.startswith(("124","12","1")):
            return "HCM"
    return "OTHER"

def extract_location_code(loc_upper: str):
    """
    Th·ª≠ l·∫•y m√£ v·ªã tr√≠ ·ªü ƒë·∫ßu, m·∫´u nh∆∞ '201/201' ho·∫∑c '124/124'...
    Tr·∫£ v·ªÅ m√£ d·∫°ng '201' ho·∫∑c '124' (chu·ªói) n·∫øu t√¨m ƒë∆∞·ª£c, ho·∫∑c None.
    """
    m = re.match(r'^\s*([0-9]{2,4})\/[0-9]{2,4}', loc_upper)
    if m:
        return m.group(1)
    # th·ª≠ t√¨m token d·∫°ng '201/' ·ªü b·∫•t k·ª≥ v·ªã tr√≠
    m2 = re.search(r'([0-9]{2,4})\/[0-9]{2,4}', loc_upper)
    if m2:
        return m2.group(1)
    return None

# ===================== ODOO CONNECT =====================
def odoo_connect():
    try:
        common = xmlrpc.client.ServerProxy(f"{ODOO_URL}/xmlrpc/2/common")
        uid = common.authenticate(ODOO_DB, ODOO_USER, ODOO_PASS, {})
        if not uid:
            logging.error("‚ùå Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p Odoo ‚Äì ki·ªÉm tra user/pass/db.")
            return None, None
        models = xmlrpc.client.ServerProxy(f"{ODOO_URL}/xmlrpc/2/object")
        return uid, models
    except Exception as e:
        logging.exception(f"L·ªói k·∫øt n·ªëi Odoo: {e}")
        return None, None

# ===================== L·∫§Y T·ªíN => GOM THEO KHO =====================
def get_stock_info(sku: str):
    uid, models = odoo_connect()
    if not uid:
        return "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn h·ªá th·ªëng Odoo."

    try:
        # t√¨m product theo SKU
        pid = models.execute_kw(
            ODOO_DB, uid, ODOO_PASS,
            'product.product', 'search',
            [[['default_code', '=', sku]]]
        )
        if not pid:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y m√£ h√†ng *{sku}*"

        # L·∫•y t·∫•t c·∫£ stock.quant li√™n quan (quantity = 'Hi·ªán c√≥', reserved_quantity -> tr·ª´ ra ƒë·ªÉ th√†nh 'C√≥ h√†ng')
        quants = models.execute_kw(
            ODOO_DB, uid, ODOO_PASS,
            'stock.quant', 'search_read',
            [[['product_id', 'in', pid]]],
            {'fields': ['location_id', 'quantity', 'reserved_quantity']}
        )
        if not quants:
            return f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu t·ªìn cho *{sku}*"

        # t·ªïng c√°c nh√≥m c·∫ßn thi·∫øt
        summary = {
            "HN": 0.0,
            "HCM": 0.0,
            "THANHLY_HN": 0.0,
            "THANHLY_HCM": 0.0,
            "NHAP_HN": 0.0,
            "OTHER": 0.0
        }

        # Duy·ªát quants, l·∫•y "c√≥ h√†ng" = quantity - reserved_quantity
        for q in quants:
            loc = (q.get('location_id') and q['location_id'][1]) or ""
            loc_upper = str(loc).upper()
            qty = (float(q.get('quantity') or 0) - float(q.get('reserved_quantity') or 0))
            # normalize tiny -0.0
            if abs(qty) < 1e-9:
                qty = 0.0

            cls = classify_location(loc_upper)
            if cls == "HN":
                summary["HN"] += qty
            elif cls == "HCM":
                summary["HCM"] += qty
            elif cls == "THANHLY_HN":
                summary["THANHLY_HN"] += qty
            elif cls == "THANHLY_HCM":
                summary["THANHLY_HCM"] += qty
            elif cls == "NHAP_HN":
                summary["NHAP_HN"] += qty
            else:
                summary["OTHER"] += qty
                logging.debug(f"OTHER loc -> '{loc_upper}' qty={qty}")

        total = sum([v for k, v in summary.items() if k != "OTHER"])  # ch·ªâ t√≠nh c√°c nh√≥m quan tr·ªçng

        # format tr·∫£ v·ªÅ: show r√µ m√£ v·ªã tr√≠ n·∫øu mu·ªën? hi·ªán tr·∫£ s·ªë t·ªïng cho t·ª´ng nh√≥m.
        lines = [
            f"üì¶ *{sku}*",
            f"üìä T·ªïng kh·∫£ d·ª•ng (t√≠nh theo c√°c nh√≥m ch√≠nh): *{total:.0f}*",
            f"1Ô∏è‚É£ T·ªìn kho HN: {summary['HN']:.0f}",
            f"2Ô∏è‚É£ T·ªìn kho HCM: {summary['HCM']:.0f}",
            f"3Ô∏è‚É£ Kho nh·∫≠p HN: {summary['NHAP_HN']:.0f}",
            f"4Ô∏è‚É£ Kho thanh l√Ω HN: {summary['THANHLY_HN']:.0f}",
            f"5Ô∏è‚É£ Kho thanh l√Ω HCM: {summary['THANHLY_HCM']:.0f}"
        ]

        # th√™m debug ng·∫Øn n·∫øu c√≥ OTHER (v·ªã tr√≠ kh√¥ng x√°c ƒë·ªãnh)
        if summary["OTHER"] != 0:
            lines.append(f"‚ÑπÔ∏è (Kho kh√°c kh√¥ng ph√¢n lo·∫°i: {summary['OTHER']:.0f})")

        return "\n".join(lines)

    except Exception as e:
        logging.exception(f"L·ªói ƒë·ªçc t·ªìn cho {sku}: {e}")
        return f"‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu: {e}"

# ===================== HANDLER TELEGRAM =====================
@dp.message_handler(commands=["start", "help"])
async def help_cmd(m: types.Message):
    await m.reply(
        "ü§ñ Bot ki·ªÉm tra t·ªìn kho tr·ª±c ti·∫øp t·ª´ Odoo.\n"
        "D√πng:\n`/ton <M√É_H√ÄNG>` ho·∫∑c g√µ m√£ h√†ng b·∫•t k·ª≥ ƒë·ªÉ tra nhanh.\n"
        "L∆∞u √Ω: Bot l·∫•y 'C√≥ h√†ng' = Hi·ªán c√≥ - Reserved (t∆∞∆°ng ·ª©ng c·ªôt 'C√≥ h√†ng' tr√™n Odoo).",
        parse_mode="Markdown"
    )

@dp.message_handler(commands=["ton"])
async def ton_cmd(m: types.Message):
    sku = m.text.replace("/ton", "").strip().upper()
    if not sku:
        return await m.reply("D√πng: `/ton M√É_H√ÄNG`", parse_mode="Markdown")
    res = get_stock_info(sku)
    await m.reply(res, parse_mode="Markdown")

@dp.message_handler()
async def any_text(m: types.Message):
    sku = m.text.strip().upper()
    if not sku or " " in sku:
        return
    res = get_stock_info(sku)
    await m.reply(res, parse_mode="Markdown")

# ===================== WEBHOOK SERVER =====================
async def handle_webhook(request: web.Request):
    from aiogram import Bot as AiogramBot
    try:
        data = await request.json()
        update = types.Update(**data)

        # fix context ƒë·ªÉ c√°c handler d√πng m.reply() ƒë∆∞·ª£c (b·∫Øt bu·ªôc)
        AiogramBot.set_current(bot)
        dp.bot = bot

        await dp.process_update(update)
    except Exception as e:
        logging.exception(f"L·ªói x·ª≠ l√Ω update: {e}")
    return web.Response(text="ok")

async def on_startup(app):
    # set webhook ‚Äî n·∫øu WEBHOOK_URL kh√¥ng h·ª£p l·ªá th√¨ log s·∫Ω hi·ªÉn th·ªã
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"‚úÖ Webhook set: {WEBHOOK_URL}")
    except Exception as e:
        logging.exception(f"L·ªói set_webhook: {e}")

async def on_shutdown(app):
    try:
        await bot.delete_webhook()
    except Exception:
        pass
    try:
        await bot.close()
    except Exception:
        pass
    logging.info("üîª Bot stopped.")

def main():
    logging.info("üöÄ TONKHO_ODOO_BOT ƒëang kh·ªüi ch·∫°y (aiohttp server)...")
    app = web.Application()
    app.router.add_get("/", lambda _: web.Response(text="ok"))
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
