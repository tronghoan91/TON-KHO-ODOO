# main.py
# TONKHO_ODOO_BOT ‚Äì Telegram ‚Üî Odoo ERP Integration
# S·ª≠a ƒë·ªÉ ch·∫°y tr√™n Render (Docker) v·ªõi aiogram 2.x + webhook
# Author (edited): Anh Ho√†n (v·ªõi ch·ªânh s·ª≠a)

import logging
import os
import xmlrpc.client
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
import asyncio

# ---------------------------
# C·∫•u h√¨nh: ∆∞u ti√™n bi·∫øn m√¥i tr∆∞·ªùng
# ---------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.warning("‚ö†Ô∏è BOT_TOKEN kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t. Bot s·∫Ω kh√¥ng ho·∫°t ƒë·ªông n·∫øu token kh√¥ng h·ª£p l·ªá.")

# Odoo - n√™n set qua bi·∫øn m√¥i tr∆∞·ªùng tr√™n Render (kh√¥ng commit credential)
ODOO_URL = os.getenv("ODOO_URL", "https://erp.nguonsongviet.vn")
ODOO_DB = os.getenv("ODOO_DB", "production")
ODOO_USER = os.getenv("ODOO_USER", "kinhdoanh09@nguonsongviet.vn")
ODOO_PASS = os.getenv("ODOO_PASS", "Tronghoan91@")  # KH√îNG N√äN ƒë·ªÉ m·∫∑c ƒë·ªãnh trong repo

# Webhook / Host (Render cung c·∫•p HTTPS). RECOMMENDED: set RENDER_EXTERNAL_URL env var in Render dashboard.
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")  # v√≠ d·ª•: "https://ten-app.onrender.com"
if not WEBHOOK_HOST:
    logging.warning("‚ö†Ô∏è REENDER_EXTERNAL_URL kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t. H√£y ƒë·∫∑t bi·∫øn m√¥i tr∆∞·ªùng RENDER_EXTERNAL_URL b·∫±ng URL app c·ªßa b·∫°n.")
WEBHOOK_PATH = f"/tg/webhook/{BOT_TOKEN}" if BOT_TOKEN else "/tg/webhook/undefined"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

# ---------------------------
# Setup bot + dispatcher
# ---------------------------
bot = Bot(token=BOT_TOKEN) if BOT_TOKEN else Bot(token="")  # n·∫øu token r·ªóng: s·∫Ω g·∫∑p l·ªói khi g·ªçi API -> log s·∫Ω hi·ªÉn th·ªã
dp = Dispatcher(bot)

# ---------------------------
# Logging
# ---------------------------
logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s - %(levelname)s - %(message)s")

# ---------------------------
# K·∫øt n·ªëi Odoo
# ---------------------------
def get_odoo_connection():
    try:
        common = xmlrpc.client.ServerProxy(f"{ODOO_URL}/xmlrpc/2/common", allow_none=True)
        uid = common.authenticate(ODOO_DB, ODOO_USER, ODOO_PASS, {})
        if not uid:
            logging.error("‚ùå Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p Odoo ‚Äì ki·ªÉm tra ODOO_USER/ODOO_PASS/ODOO_DB.")
            return None, None
        models = xmlrpc.client.ServerProxy(f"{ODOO_URL}/xmlrpc/2/object", allow_none=True)
        return uid, models
    except Exception as e:
        logging.exception(f"‚ùå L·ªói k·∫øt n·ªëi Odoo: {e}")
        return None, None

# ---------------------------
# L·∫•y t·ªìn theo SKU
# ---------------------------
def get_stock_qty(sku: str):
    uid, models = get_odoo_connection()
    if not uid or not models:
        return "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Odoo ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ªìn."

    try:
        product_ids = models.execute_kw(ODOO_DB, uid, ODOO_PASS,
                                        'product.product', 'search',
                                        [[['default_code', '=', sku]]])
        if not product_ids:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y m√£ h√†ng *{sku}*"

        quants = models.execute_kw(ODOO_DB, uid, ODOO_PASS,
                                   'stock.quant', 'search_read',
                                   [[['product_id', 'in', product_ids]]],
                                   {'fields': ['location_id', 'quantity', 'reserved_quantity']})
        if not quants:
            return f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu t·ªìn cho s·∫£n ph·∫©m *{sku}*"

        total_available = sum((q.get('quantity') or 0) - (q.get('reserved_quantity') or 0) for q in quants)
        detail_lines = "\n".join(
            f"- {q['location_id'][1]}: {(q.get('quantity') or 0) - (q.get('reserved_quantity') or 0):.0f}"
            for q in quants if (q.get('quantity') or 0) - (q.get('reserved_quantity') or 0) != 0
        )

        return (f"üì¶ *{sku}*\n"
                f"T·ªìn kh·∫£ d·ª•ng: *{total_available:.0f}*\n"
                f"{detail_lines if detail_lines else '(Kh√¥ng c√≥ chi ti·∫øt theo kho)'}")
    except Exception as e:
        logging.exception(f"L·ªói khi ƒë·ªçc t·ªìn cho {sku}: {e}")
        return f"‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu t·ªìn: {e}"

# ---------------------------
# Handlers Telegram
# ---------------------------
@dp.message_handler(commands=['start', 'help'])
async def start_cmd(message: types.Message):
    await message.answer("ü§ñ Bot ki·ªÉm tra t·ªìn kho Odoo.\nD√πng c√∫ ph√°p:\n`/TON M√É_H√ÄNG`\nV√≠ d·ª•: `/TON AC-281`", parse_mode="Markdown")

@dp.message_handler(commands=['TON'])
async def ton_cmd(message: types.Message):
    sku = message.text.replace('/TON', '').strip().upper()
    if not sku:
        await message.reply("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ h√†ng sau l·ªánh.\nV√≠ d·ª•: `/TON AC-281`", parse_mode="Markdown")
        return
    result = get_stock_qty(sku)
    # N·∫øu result l√† chu·ªói Markdown, g·ª≠i tr·∫£ v·ªÅ
    await message.reply(result, parse_mode="Markdown")

# ---------------------------
# Webhook startup/shutdown
# ---------------------------
async def on_startup(dp):
    if not WEBHOOK_URL:
        logging.error("‚ùå WEBHOOK_URL kh√¥ng h·ª£p l·ªá. Kh√¥ng th·ªÉ set webhook.")
        return
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"‚úÖ Webhook ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p t·∫°i {WEBHOOK_URL}")
    except Exception as e:
        logging.exception(f"‚ùå L·ªói khi set webhook: {e}")

async def on_shutdown(dp):
    logging.warning("üîª ƒêang t·∫Øt bot...")
    try:
        await bot.delete_webhook()
    except Exception as e:
        logging.exception(f"L·ªói khi x√≥a webhook: {e}")
    await bot.close()

# ---------------------------
# Entrypoint
# ---------------------------
def main():
    # Ki·ªÉm tra config s·ªõm
    if not BOT_TOKEN:
        logging.error("BOT_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. H·ªßy kh·ªüi ch·∫°y.")
        return
    if not WEBHOOK_HOST:
        logging.error("RENDER_EXTERNAL_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. H·ªßy kh·ªüi ch·∫°y.")
        return

    logging.info("üöÄ TONKHO_ODOO_BOT ƒëang kh·ªüi ch·∫°y (webhook mode)...")
    # start_webhook s·∫Ω t·ª± t·∫°o aiohttp server n·ªôi b·ªô
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8080))
    )

if __name__ == "__main__":
    main()
