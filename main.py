# main.py
# TONKHO_ODOO_BOT ‚Äì Telegram ‚Üî Odoo ERP Integration (Real-time, grouped by warehouse)
# Author: Anh Ho√†n

import os, logging, xmlrpc.client
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook

# ===================== CONFIG =====================
BOT_TOKEN = os.getenv("BOT_TOKEN")
ODOO_URL  = os.getenv("ODOO_URL", "https://erp.nguonsongviet.vn")
ODOO_DB   = os.getenv("ODOO_DB", "production")
ODOO_USER = os.getenv("ODOO_USER", "kinhdoanh09@nguonsongviet.vn")
ODOO_PASS = os.getenv("ODOO_PASS", "Tronghoan91@")

WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL", "https://tonkho-odoo.onrender.com").rstrip("/")
WEBHOOK_PATH = f"/tg/webhook/{BOT_TOKEN}"
WEBHOOK_URL  = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
PORT = int(os.getenv("PORT", "10000"))

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ===================== ODOO CONNECTION =====================
def odoo_connect():
    try:
        common = xmlrpc.client.ServerProxy(f"{ODOO_URL}/xmlrpc/2/common")
        uid = common.authenticate(ODOO_DB, ODOO_USER, ODOO_PASS, {})
        if not uid:
            logging.error("‚ùå Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p Odoo.")
            return None, None
        models = xmlrpc.client.ServerProxy(f"{ODOO_URL}/xmlrpc/2/object")
        return uid, models
    except Exception as e:
        logging.error(f"L·ªói k·∫øt n·ªëi Odoo: {e}")
        return None, None

# ===================== GET STOCK BY SKU =====================
def get_stock_info(sku: str):
    uid, models = odoo_connect()
    if not uid:
        return "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Odoo."

    try:
        # T√¨m s·∫£n ph·∫©m
        pid = models.execute_kw(ODOO_DB, uid, ODOO_PASS,
                                'product.product', 'search',
                                [[['default_code', '=', sku]]])
        if not pid:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y m√£ h√†ng *{sku}*"

        quants = models.execute_kw(ODOO_DB, uid, ODOO_PASS,
                                   'stock.quant', 'search_read',
                                   [[['product_id', 'in', pid]]],
                                   {'fields': ['location_id', 'quantity', 'reserved_quantity']})

        if not quants:
            return f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu t·ªìn cho *{sku}*"

        # Gom nh√≥m theo v·ªã tr√≠
        summary = {
            "HN": 0,
            "HCM": 0,
            "THANH L√ù HN": 0,
            "THANH L√ù HCM": 0,
            "NH·∫¨P HN": 0
        }

        for q in quants:
            loc = (q["location_id"][1] or "").upper()
            qty = float(q["quantity"]) - float(q["reserved_quantity"])

            if "THANH L√ù" in loc:
                if "HN" in loc or "H√Ä N·ªòI" in loc:
                    summary["THANH L√ù HN"] += qty
                elif "HCM" in loc:
                    summary["THANH L√ù HCM"] += qty
                else:
                    # n·∫øu kh√¥ng x√°c ƒë·ªãnh r√µ, c·ªông chung HN
                    summary["THANH L√ù HN"] += qty
            elif "NH·∫¨P" in loc or "INCOMING" in loc:
                if "HN" in loc or "H√Ä N·ªòI" in loc:
                    summary["NH·∫¨P HN"] += qty
            elif "HCM" in loc or "TPHCM" in loc or "TP HCM" in loc:
                summary["HCM"] += qty
            elif "HN" in loc or "H√Ä N·ªòI" in loc:
                summary["HN"] += qty
            else:
                # Kh√¥ng r√µ kho => b·ªè qua ho·∫∑c log
                logging.debug(f"B·ªè qua v·ªã tr√≠ kh√¥ng nh·∫≠n di·ªán: {loc}")

        total = sum(summary.values())

        lines = [
            f"üì¶ *{sku}*",
            f"1Ô∏è‚É£ T·ªìn kho HN: {summary['HN']:.0f}",
            f"2Ô∏è‚É£ T·ªìn kho HCM: {summary['HCM']:.0f}",
            f"3Ô∏è‚É£ Kho nh·∫≠p HN: {summary['NH·∫¨P HN']:.0f}",
            f"4Ô∏è‚É£ Kho thanh l√Ω HN: {summary['THANH L√ù HN']:.0f}",
            f"5Ô∏è‚É£ Kho thanh l√Ω HCM: {summary['THANH L√ù HCM']:.0f}",
            f"‚Äî T·ªïng kh·∫£ d·ª•ng: *{total:.0f}*"
        ]

        return "\n".join(lines)

    except Exception as e:
        logging.error(f"L·ªói ƒë·ªçc t·ªìn {sku}: {e}")
        return f"‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu: {e}"

# ===================== HANDLERS =====================
@dp.message_handler(commands=["start", "help"])
async def help_cmd(m: types.Message):
    await m.reply(
        "ü§ñ Bot ki·ªÉm tra t·ªìn kho tr·ª±c ti·∫øp t·ª´ Odoo.\n"
        "D√πng l·ªánh:\n`/ton <M√É_H√ÄNG>` ho·∫∑c g√µ m√£ h√†ng b·∫•t k·ª≥.",
        parse_mode="Markdown"
    )

@dp.message_handler(commands=["ton"])
async def ton_cmd(m: types.Message):
    sku = m.text.replace("/ton", "").strip().upper()
    if not sku:
        return await m.reply("D√πng: `/ton M√É_H√ÄNG`", parse_mode="Markdown")
    res = get_stock_info(sku)
    await m.reply(res, parse_mode="Markdown")

@dp.message_handler()
async def any_text(m: types.Message):
    sku = m.text.strip().upper()
    if not sku or " " in sku:
        return
    res = get_stock_info(sku)
    await m.reply(res, parse_mode="Markdown")

# ===================== WEBHOOK SERVER =====================
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"‚úÖ Webhook set: {WEBHOOK_URL}")

async def on_shutdown(dp):
    await bot.delete_webhook()
    await bot.close()
    logging.info("üîª Bot stopped.")

def main():
    logging.info("üöÄ Starting TONKHO_ODOO_BOT...")
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host="0.0.0.0",
        port=PORT
    )

if __name__ == "__main__":
    main()
