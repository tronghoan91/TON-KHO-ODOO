import os
import csv
import logging
import aiohttp
from io import StringIO
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiohttp import web

# ----------------------------------------------------------
# ‚öôÔ∏è C·∫•u h√¨nh c∆° b·∫£n
# ----------------------------------------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_TOKEN_HERE")
WEBHOOK_PATH = f"/tg/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://ton-kho-odoo.onrender.com{WEBHOOK_PATH}"
PORT = int(os.getenv("PORT", 10000))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ----------------------------------------------------------
# üß© H√†m truy v·∫•n d·ªØ li·ªáu t·ª´ Odoo (API / RPC)
# ----------------------------------------------------------
async def fetch_stock_from_odoo(product_code: str):
    """Truy xu·∫•t d·ªØ li·ªáu t·ªìn kho t·ª´ Odoo"""
    odoo_url = "https://erp.nguonsongviet.vn/odoo/api/stock"
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{odoo_url}?code={product_code}") as resp:
            if resp.status == 200:
                return await resp.json()
            else:
                return None

# ----------------------------------------------------------
# üß† Nh·∫≠n di·ªán nh√≥m kho theo m√£/t√™n
# ----------------------------------------------------------
def classify_location(name: str):
    name = name.lower()
    if any(k in name for k in ["201", "h√† n·ªôi", "hanoi", "hn"]):
        if "thanh l√Ω" in name:
            return "THANHLYHN"
        if "nh·∫≠p" in name or "import" in name:
            return "NHAPHN"
        return "HN"
    elif any(k in name for k in ["124", "hcm", "h·ªì ch√≠ minh", "hcmc"]):
        if "thanh l√Ω" in name:
            return "THANHLYHCM"
        return "HCM"
    else:
        return "OTHER"

# ----------------------------------------------------------
# üì¶ X·ª≠ l√Ω d·ªØ li·ªáu t·ªìn kho
# ----------------------------------------------------------
def summarize_stock(data):
    """T·ªïng h·ª£p d·ªØ li·ªáu t·ªìn theo kho"""
    summary = {
        "HN": 0, "HCM": 0, "NHAPHN": 0, "THANHLYHN": 0, "THANHLYHCM": 0, "OTHER": 0
    }
    short_detail = []
    for item in data.get("lines", []):
        loc_name = item.get("location", "")
        qty = item.get("qty", 0)
        reserved = item.get("reserved", 0)
        available = qty - reserved
        group = classify_location(loc_name)
        summary[group] += available
        short_detail.append(f"- {loc_name} | c√≥: {available} | {group}")
    return summary, "\n".join(short_detail)

# ----------------------------------------------------------
# üßæ T·∫°o file CSV th·ªëng k√™
# ----------------------------------------------------------
async def create_csv_stock(stock_list, filename):
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(["M√£ SP", "T·ªìn HN", "T·ªìn HCM", "T·ªìn nh·∫≠p HN", "TL HN", "TL HCM", "T·ªïng t·ªìn"])
    for row in stock_list:
        writer.writerow([row["code"], row["HN"], row["HCM"], row["NHAPHN"], row["THANHLYHN"], row["THANHLYHCM"], row["total"]])
    path = f"/tmp/{filename}"
    with open(path, "w", newline='', encoding="utf-8") as f:
        f.write(output.getvalue())
    return path

# ----------------------------------------------------------
# üß† Command: /start
# ----------------------------------------------------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "ü§ñ *BOT TRA C·ª®U T·ªíN KHO ODOO*\n\n"
        "C√°c l·ªánh h·ªó tr·ª£:\n"
        "‚Ä¢ /ton <M√É SP> ‚Äî tra t·ªìn kho tr·ª±c ti·∫øp t·ª´ Odoo\n"
        "‚Ä¢ /thongkehn ‚Äî xu·∫•t th·ªëng k√™ t·ªìn HN/HCM\n"
        "‚Ä¢ /dexuatnhap ‚Äî xu·∫•t danh s√°ch ƒë·ªÅ xu·∫•t nh·∫≠p h√†ng HN\n\n"
        "_To√†n b·ªô d·ªØ li·ªáu c·∫≠p nh·∫≠t realtime t·ª´ h·ªá th·ªëng Odoo_",
        parse_mode="Markdown"
    )

# ----------------------------------------------------------
# üîç Command: /ton
# ----------------------------------------------------------
@dp.message(Command("ton"))
async def cmd_ton(message: types.Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.reply("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ s·∫£n ph·∫©m. V√≠ d·ª•: /ton AC-281")
        return

    code = parts[1].strip().upper()
    data = await fetch_stock_from_odoo(code)
    if not data or not data.get("lines"):
        await message.reply(f"‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho {code}.")
        return

    summary, detail_text = summarize_stock(data)
    total = sum(summary.values())
    hn = summary["HN"]
    hcm = summary["HCM"]
    nhaphn = summary["NHAPHN"]
    tlhn = summary["THANHLYHN"]
    tlhcm = summary["THANHLYHCM"]

    need_move = max(0, 50 - hn) if hn < 50 else 0

    text = (
        f"üì¶ *{code}*\n"
        f"üßÆ T·ªïng: {total}\n"
        f"üè¢ HN: {hn} | üè¨ HCM: {hcm}\n"
        f"üì• Nh·∫≠p HN: {nhaphn} | üõí TL HN: {tlhn} | TL HCM: {tlhcm}\n"
    )
    if need_move > 0:
        text += f"‚û°Ô∏è *ƒê·ªÅ xu·∫•t chuy·ªÉn th√™m {need_move} sp ra HN* ƒë·ªÉ ƒë·ªß t·ªìn.\n"
    text += f"\nüîç *Chi ti·∫øt r√∫t g·ªçn:*\n{detail_text}"

    await message.answer(text, parse_mode="Markdown")

# ----------------------------------------------------------
# üìä Command: /thongkehn
# ----------------------------------------------------------
@dp.message(Command("thongkehn"))
async def cmd_thongkehn(message: types.Message):
    await message.reply("‚è≥ ƒêang t·ªïng h·ª£p d·ªØ li·ªáu th·ªëng k√™ HN/HCM (vui l√≤ng ƒë·ª£i)...")

    products = ["AC-281", "MK-5170", "MK-332"]  # danh s√°ch test m·∫´u
    stock_list = []
    for code in products:
        data = await fetch_stock_from_odoo(code)
        if not data:
            continue
        summary, _ = summarize_stock(data)
        stock_list.append({
            "code": code,
            **summary,
            "total": sum(summary.values())
        })

    path = await create_csv_stock(stock_list, "thongkehn.csv")
    file = FSInputFile(path)
    await message.answer_document(file, caption="üìà B√°o c√°o th·ªëng k√™ t·ªìn HN/HCM")

# ----------------------------------------------------------
# üìà Command: /dexuatnhap
# ----------------------------------------------------------
@dp.message(Command("dexuatnhap"))
async def cmd_dexuatnhap(message: types.Message):
    await message.reply("‚è≥ ƒêang t·∫°o danh s√°ch ƒë·ªÅ xu·∫•t nh·∫≠p h√†ng HN...")

    products = ["AC-281", "MK-5170", "MK-332"]
    stock_list = []
    for code in products:
        data = await fetch_stock_from_odoo(code)
        if not data:
            continue
        summary, _ = summarize_stock(data)
        hn = summary["HN"]
        missing = max(0, 50 - hn)
        stock_list.append({
            "code": code,
            **summary,
            "need_move": missing,
            "total": sum(summary.values())
        })

    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(["M√£ SP", "T·ªìn HN", "Thi·∫øu ƒë·ªÉ ƒë·∫°t 50", "T·ªìn HCM", "T·ªïng t·ªìn"])
    for row in stock_list:
        writer.writerow([row["code"], row["HN"], row["need_move"], row["HCM"], row["total"]])
    path = f"/tmp/dexuatnhap.csv"
    with open(path, "w", newline='', encoding="utf-8") as f:
        f.write(output.getvalue())

    file = FSInputFile(path)
    await message.answer_document(file, caption="üì• Danh s√°ch ƒë·ªÅ xu·∫•t nh·∫≠p h√†ng HN")

# ----------------------------------------------------------
# üåê Webhook + server
# ----------------------------------------------------------
async def handle_webhook(request: web.Request):
    update = types.Update(**await request.json())
    await dp.feed_update(bot, update)
    return web.Response()

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"‚úÖ Webhook set: {WEBHOOK_URL}")

app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    logging.info("üöÄ TONKHO_ODOO_BOT ƒëang kh·ªüi ch·∫°y (aiogram v3)...")
    web.run_app(app, host="0.0.0.0", port=PORT)
